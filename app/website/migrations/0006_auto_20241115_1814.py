# Generated by Django 4.2.6 on 2024-11-15 23:14

from django.db import migrations
from django.utils.text import slugify
from datetime import datetime
from pytz import UTC


class Migration(migrations.Migration):
    dependencies = [
        ("website", "0005_auto_20241115_1744"),
    ]

    def add_events(apps, schema_editor):
        Event = apps.get_model("website", "Event")  # Replace with your Event model
        EventCategory = apps.get_model("website", "EventCategory")
        EventTag = apps.get_model("website", "EventTag")
        ProgramDate = apps.get_model("website", "ProgramDate")

        EVENTS = [
            {
                "title": "Seasonal Ski Rental",
                "program_dates": [
                    {"date": "2024-11-16", "start_time": "13:00", "end_time": "15:00"},
                    {"date": "2024-12-08", "start_time": "13:00", "end_time": "15:00"},
                ],
            },
            {
                "title": "Ford Sayre Ski Camp",
                "program_dates": [
                    {"date": "2024-11-23"},
                    {"date": "2024-11-24"},
                    {"date": "2024-11-25"},
                    {"date": "2024-11-26"},
                    {"date": "2024-11-27"},
                    {"date": "2024-11-28"},
                    {"date": "2024-11-29"},
                    {"date": "2024-11-30"},
                ],
                "category": "Training Camp",
                "tags": ["Skiing"],
            },
            {
                "title": "Welcome Winter",
                "program_dates": [
                    {"date": "2024-12-07", "start_time": "17:00", "end_time": "20:00"},
                ],
            },
            {
                "title": "High School Nordic Race",
                "program_dates": [
                    {"date": "2024-12-10", "start_time": "15:00", "end_time": "17:00"},
                ],
            },
            {
                "title": "UMFK Laser Biathlon",
                "program_dates": [
                    {"date": "2024-12-13"},
                    {"date": "2024-12-14"},
                ],
                "category": "Biathlon",
                "tags": ["Competition"],
            },
            {
                "title": "Christmas Ski Camp",
                "program_dates": [
                    {"date": "2024-12-26"},
                    {"date": "2024-12-27"},
                    {"date": "2024-12-28"},
                    {"date": "2024-12-29"},
                    {"date": "2024-12-30"},
                ],
                "category": "Training Camp",
                "tags": ["Skiing"],
            },
            {
                "title": "Ben Paradis Invitational Race",
                "program_dates": [
                    {"date": "2024-12-27", "start_time": "13:00", "end_time": "15:00"},
                ],
            },
            {
                "title": "IBU Regional Biathlon Cup",
                "program_dates": [
                    {"date": "2025-01-31"},
                    {"date": "2025-02-01"},
                    {"date": "2025-02-02"},
                ],
                "category": "Biathlon",
                "tags": ["Championship Event"],
            },
            {
                "title": "Frosty Bites",
                "program_dates": [
                    {"date": "2025-02-09", "start_time": "13:00", "end_time": "15:30"},
                ],
            },
            {
                "title": "Pat’s Ride",
                "program_dates": [
                    {"date": "2025-02-27"},
                ],
                "category": "Community Event",
                "tags": ["Social Event"],
            },
        ]

        for event_data in EVENTS:
            # Get related category
            category = None
            if "category" in event_data:
                category = EventCategory.objects.filter(
                    name=event_data["category"]
                ).first()

            # Get related tags
            tags = []
            if "tags" in event_data:
                tags = list(EventTag.objects.filter(name__in=event_data["tags"]))

            # Create the event
            event = Event.objects.create(
                title=event_data["title"],
                slug=slugify(event_data["title"]),
                category=category,
            )

            if tags:
                event.tags.set(tags)

            # Add program dates
            for date_data in event_data["program_dates"]:
                start_time = date_data.get("start_time")
                if start_time:
                    start_time = datetime.strptime(start_time, "%H:%M").time()

                end_time = date_data.get("end_time")
                if end_time:
                    end_time = datetime.strptime(end_time, "%H:%M").time()

                ProgramDate.objects.create(
                    event=event,
                    date=datetime.strptime(date_data["date"], "%Y-%m-%d").replace(tzinfo=UTC),
                    start_time=start_time,
                    end_time=end_time,
                )

    def remove_events(apps, schema_editor):
        Event = apps.get_model("website", "Event")
        event_titles = [
            "Seasonal Ski Rental",
            "Ford Sayre Ski Camp",
            "Welcome Winter",
            "High School Nordic Race",
            "UMFK Laser Biathlon",
            "Christmas Ski Camp",
            "Ben Paradis Invitational Race",
            "IBU Regional Biathlon Cup",
            "Frosty Bites",
            "Pat’s Ride",
        ]
        Event.objects.filter(title__in=event_titles).delete()

    operations = [
        migrations.RunPython(add_events, remove_events),
    ]
